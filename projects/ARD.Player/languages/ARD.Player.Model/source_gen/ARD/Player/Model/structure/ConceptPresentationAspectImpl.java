package ARD.Player.Model.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_EmbeddedConfig;
  private ConceptPresentation props_GenericConfig;
  private ConceptPresentation props_ImageTemplateConfig;
  private ConceptPresentation props_ImageTemplateNamedSizeConfig;
  private ConceptPresentation props_ImageTemplateWidthConfig;
  private ConceptPresentation props_PlayerConfig;
  private ConceptPresentation props_PluginConfig;
  private ConceptPresentation props_WebConfig;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.EmbeddedConfig:
        if (props_EmbeddedConfig == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmbeddedConfig");
          props_EmbeddedConfig = cpb.create();
        }
        return props_EmbeddedConfig;
      case LanguageConceptSwitch.GenericConfig:
        if (props_GenericConfig == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GenericConfig");
          props_GenericConfig = cpb.create();
        }
        return props_GenericConfig;
      case LanguageConceptSwitch.ImageTemplateConfig:
        if (props_ImageTemplateConfig == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ImageTemplateConfig");
          props_ImageTemplateConfig = cpb.create();
        }
        return props_ImageTemplateConfig;
      case LanguageConceptSwitch.ImageTemplateNamedSizeConfig:
        if (props_ImageTemplateNamedSizeConfig == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ImageTemplateNamedSizeConfig");
          props_ImageTemplateNamedSizeConfig = cpb.create();
        }
        return props_ImageTemplateNamedSizeConfig;
      case LanguageConceptSwitch.ImageTemplateWidthConfig:
        if (props_ImageTemplateWidthConfig == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ImageTemplateWidthConfig");
          props_ImageTemplateWidthConfig = cpb.create();
        }
        return props_ImageTemplateWidthConfig;
      case LanguageConceptSwitch.PlayerConfig:
        if (props_PlayerConfig == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PlayerConfig = cpb.create();
        }
        return props_PlayerConfig;
      case LanguageConceptSwitch.PluginConfig:
        if (props_PluginConfig == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PluginConfig");
          props_PluginConfig = cpb.create();
        }
        return props_PluginConfig;
      case LanguageConceptSwitch.WebConfig:
        if (props_WebConfig == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("WebConfig");
          props_WebConfig = cpb.create();
        }
        return props_WebConfig;
    }
    return null;
  }
}
