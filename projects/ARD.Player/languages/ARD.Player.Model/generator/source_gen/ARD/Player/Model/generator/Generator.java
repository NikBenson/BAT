package ARD.Player.Model.generator;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.TemplateModuleBase;
import java.util.concurrent.atomic.AtomicReference;
import jetbrains.mps.generator.runtime.TemplateModel;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.language.LanguageRuntime;
import java.util.Collection;
import ARD.Player.Model.generator.templates.TemplateModelImpl;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Generator extends TemplateModuleBase {
  private final AtomicReference<TemplateModel[]> models = new AtomicReference<>();

  public Generator(LanguageRegistry languageRegistry, LanguageRuntime sourceLanguage) {
    super(languageRegistry, sourceLanguage);
  }
  @Override
  public String getAlias() {
    return "ARD.Player.Model.generator/main";
  }

  @Override
  public Collection<TemplateModel> getModels() {
    TemplateModel[] rv = models.get();
    while (rv == null) {
      rv = new TemplateModel[1];
      rv[0] = new TemplateModelImpl(this);
      if (!(models.compareAndSet(null, rv))) {
        rv = models.get();
      }
    }
    return Arrays.asList(rv);
  }


  @NotNull
  @Override
  public SModuleReference getModuleReference() {
    return PersistenceFacade.getInstance().createModuleReference("ab066e63-8eb2-456a-aa12-71fd8ffa0abe(ARD.Player.Model.generator)");
  }

  @Override
  public Collection<SLanguage> getTargetLanguages() {
    SLanguage[] rv = new SLanguage[2];
    rv[0] = MetaAdapterFactory.getLanguage(0x22472c372c634f45L, 0xa6417ea7483e57ebL, "json.file");
    rv[1] = MetaAdapterFactory.getLanguage(0xbbf76c73c6c840c0L, 0xab7b9998034e6ff8L, "json.model");
    return Arrays.asList(rv);
  }

}
