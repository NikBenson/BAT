package json.model.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class WrapWithArray_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public WrapWithArray_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:fc69be30-1a90-4606-a426-33ed9d125c3a(json.model.intentions)", "473053312756639849"));
  }

  @Override
  public String getPresentation() {
    return "WrapWithArray";
  }

  @Override
  public boolean isSurroundWith() {
    return true;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Wrap with array";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode prevNode = node;
      SNode array = SNodeOperations.replaceWithNewChild(node, CONCEPTS.JSONArray$UV);
      ListSequence.fromList(SLinkOperations.getChildren(array, LINKS.value$bjoD)).addElement(prevNode);
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      return true;
    }



    @Override
    public IntentionDescriptor getDescriptor() {
      return WrapWithArray_Intention.this;
    }

  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept JSONArray$UV = MetaAdapterFactory.getConcept(0xbbf76c73c6c840c0L, 0xab7b9998034e6ff8L, 0x515a2af4d2695bcL, "json.model.structure.JSONArray");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink value$bjoD = MetaAdapterFactory.getContainmentLink(0xbbf76c73c6c840c0L, 0xab7b9998034e6ff8L, 0x515a2af4d2695bcL, 0x515a2af4d2695e3L, "value");
  }
}
