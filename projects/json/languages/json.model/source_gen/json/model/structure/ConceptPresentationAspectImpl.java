package json.model.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_IJSONCollection;
  private ConceptPresentation props_JSONArray;
  private ConceptPresentation props_JSONBoolean;
  private ConceptPresentation props_JSONDouble;
  private ConceptPresentation props_JSONInteger;
  private ConceptPresentation props_JSONNullValue;
  private ConceptPresentation props_JSONNumber;
  private ConceptPresentation props_JSONObject;
  private ConceptPresentation props_JSONObjectEntry;
  private ConceptPresentation props_JSONString;
  private ConceptPresentation props_JSONValue;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.IJSONCollection:
        if (props_IJSONCollection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IJSONCollection = cpb.create();
        }
        return props_IJSONCollection;
      case LanguageConceptSwitch.JSONArray:
        if (props_JSONArray == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("[]");
          props_JSONArray = cpb.create();
        }
        return props_JSONArray;
      case LanguageConceptSwitch.JSONBoolean:
        if (props_JSONBoolean == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JSONBoolean");
          props_JSONBoolean = cpb.create();
        }
        return props_JSONBoolean;
      case LanguageConceptSwitch.JSONDouble:
        if (props_JSONDouble == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JSONDouble");
          props_JSONDouble = cpb.create();
        }
        return props_JSONDouble;
      case LanguageConceptSwitch.JSONInteger:
        if (props_JSONInteger == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JSONInteger");
          props_JSONInteger = cpb.create();
        }
        return props_JSONInteger;
      case LanguageConceptSwitch.JSONNullValue:
        if (props_JSONNullValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("null");
          props_JSONNullValue = cpb.create();
        }
        return props_JSONNullValue;
      case LanguageConceptSwitch.JSONNumber:
        if (props_JSONNumber == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_JSONNumber = cpb.create();
        }
        return props_JSONNumber;
      case LanguageConceptSwitch.JSONObject:
        if (props_JSONObject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("{}");
          props_JSONObject = cpb.create();
        }
        return props_JSONObject;
      case LanguageConceptSwitch.JSONObjectEntry:
        if (props_JSONObjectEntry == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(":");
          props_JSONObjectEntry = cpb.create();
        }
        return props_JSONObjectEntry;
      case LanguageConceptSwitch.JSONString:
        if (props_JSONString == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("\"\"");
          props_JSONString = cpb.create();
        }
        return props_JSONString;
      case LanguageConceptSwitch.JSONValue:
        if (props_JSONValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_JSONValue = cpb.create();
        }
        return props_JSONValue;
    }
    return null;
  }
}
