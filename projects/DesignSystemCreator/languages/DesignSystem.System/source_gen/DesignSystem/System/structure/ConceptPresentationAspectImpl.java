package DesignSystem.System.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractDesignSystemPropertyConcept;
  private ConceptPresentation props_BaseDesignSystemParentConcept;
  private ConceptPresentation props_DesignSystemColorTypeConcept;
  private ConceptPresentation props_DesignSystemConcept;
  private ConceptPresentation props_DesignSystemEnumItemConcept;
  private ConceptPresentation props_DesignSystemEnumTypeConcept;
  private ConceptPresentation props_DesignSystemFileConcept;
  private ConceptPresentation props_DesignSystemParentConcept;
  private ConceptPresentation props_DesignSystemPrimitiveTypeConcept;
  private ConceptPresentation props_DesignSystemPropertiesListConcept;
  private ConceptPresentation props_DesignSystemPropertyConcept;
  private ConceptPresentation props_DesignSystemPropertyParameterConcept;
  private ConceptPresentation props_DesignSystemPropertyParametersListConcept;
  private ConceptPresentation props_DesignSystemReferenceTypeConcept;
  private ConceptPresentation props_DesignSystemSetTypeConcept;
  private ConceptPresentation props_DesignSystemStringTypeConcept;
  private ConceptPresentation props_DesignSystemSubsystemListConcept;
  private ConceptPresentation props_DesignSystemTypeConcept;
  private ConceptPresentation props_DirectReferenceDesignSystemParentConcept;
  private ConceptPresentation props_IDesignSystemCreatesType;
  private ConceptPresentation props_IndirectReferenceDesignSystemParentConcept;
  private ConceptPresentation props_ParametizedDesignSystemPropertyConcept;
  private ConceptPresentation props_ReferenceDesignSystemParentConcept;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractDesignSystemPropertyConcept:
        if (props_AbstractDesignSystemPropertyConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractDesignSystemPropertyConcept = cpb.create();
        }
        return props_AbstractDesignSystemPropertyConcept;
      case LanguageConceptSwitch.BaseDesignSystemParentConcept:
        if (props_BaseDesignSystemParentConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DesignSystem");
          props_BaseDesignSystemParentConcept = cpb.create();
        }
        return props_BaseDesignSystemParentConcept;
      case LanguageConceptSwitch.DesignSystemColorTypeConcept:
        if (props_DesignSystemColorTypeConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Color");
          props_DesignSystemColorTypeConcept = cpb.create();
        }
        return props_DesignSystemColorTypeConcept;
      case LanguageConceptSwitch.DesignSystemConcept:
        if (props_DesignSystemConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemConcept = cpb.create();
        }
        return props_DesignSystemConcept;
      case LanguageConceptSwitch.DesignSystemEnumItemConcept:
        if (props_DesignSystemEnumItemConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemEnumItemConcept = cpb.create();
        }
        return props_DesignSystemEnumItemConcept;
      case LanguageConceptSwitch.DesignSystemEnumTypeConcept:
        if (props_DesignSystemEnumTypeConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemEnumTypeConcept = cpb.create();
        }
        return props_DesignSystemEnumTypeConcept;
      case LanguageConceptSwitch.DesignSystemFileConcept:
        if (props_DesignSystemFileConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DesignSystem");
          props_DesignSystemFileConcept = cpb.create();
        }
        return props_DesignSystemFileConcept;
      case LanguageConceptSwitch.DesignSystemParentConcept:
        if (props_DesignSystemParentConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DesignSystemParentConcept = cpb.create();
        }
        return props_DesignSystemParentConcept;
      case LanguageConceptSwitch.DesignSystemPrimitiveTypeConcept:
        if (props_DesignSystemPrimitiveTypeConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DesignSystemPrimitiveTypeConcept = cpb.create();
        }
        return props_DesignSystemPrimitiveTypeConcept;
      case LanguageConceptSwitch.DesignSystemPropertiesListConcept:
        if (props_DesignSystemPropertiesListConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("properties");
          props_DesignSystemPropertiesListConcept = cpb.create();
        }
        return props_DesignSystemPropertiesListConcept;
      case LanguageConceptSwitch.DesignSystemPropertyConcept:
        if (props_DesignSystemPropertyConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemPropertyConcept = cpb.create();
        }
        return props_DesignSystemPropertyConcept;
      case LanguageConceptSwitch.DesignSystemPropertyParameterConcept:
        if (props_DesignSystemPropertyParameterConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemPropertyParameterConcept = cpb.create();
        }
        return props_DesignSystemPropertyParameterConcept;
      case LanguageConceptSwitch.DesignSystemPropertyParametersListConcept:
        if (props_DesignSystemPropertyParametersListConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DesignSystemPropertyParametersListConcept");
          props_DesignSystemPropertyParametersListConcept = cpb.create();
        }
        return props_DesignSystemPropertyParametersListConcept;
      case LanguageConceptSwitch.DesignSystemReferenceTypeConcept:
        if (props_DesignSystemReferenceTypeConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x43e160c7168c4805L, 0x904bc45c336610e7L, 0x6909f7b4b98a806L, 0x6909f7b4b98a807L, "reference", "", "");
          props_DesignSystemReferenceTypeConcept = cpb.create();
        }
        return props_DesignSystemReferenceTypeConcept;
      case LanguageConceptSwitch.DesignSystemSetTypeConcept:
        if (props_DesignSystemSetTypeConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Set");
          props_DesignSystemSetTypeConcept = cpb.create();
        }
        return props_DesignSystemSetTypeConcept;
      case LanguageConceptSwitch.DesignSystemStringTypeConcept:
        if (props_DesignSystemStringTypeConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("String");
          props_DesignSystemStringTypeConcept = cpb.create();
        }
        return props_DesignSystemStringTypeConcept;
      case LanguageConceptSwitch.DesignSystemSubsystemListConcept:
        if (props_DesignSystemSubsystemListConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("subsystems");
          props_DesignSystemSubsystemListConcept = cpb.create();
        }
        return props_DesignSystemSubsystemListConcept;
      case LanguageConceptSwitch.DesignSystemTypeConcept:
        if (props_DesignSystemTypeConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DesignSystemTypeConcept = cpb.create();
        }
        return props_DesignSystemTypeConcept;
      case LanguageConceptSwitch.DirectReferenceDesignSystemParentConcept:
        if (props_DirectReferenceDesignSystemParentConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x43e160c7168c4805L, 0x904bc45c336610e7L, 0x6909f7b4b689f05L, 0x6909f7b4b689f06L, "designSystemConcept", "", "");
          props_DirectReferenceDesignSystemParentConcept = cpb.create();
        }
        return props_DirectReferenceDesignSystemParentConcept;
      case LanguageConceptSwitch.IDesignSystemCreatesType:
        if (props_IDesignSystemCreatesType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDesignSystemCreatesType = cpb.create();
        }
        return props_IDesignSystemCreatesType;
      case LanguageConceptSwitch.IndirectReferenceDesignSystemParentConcept:
        if (props_IndirectReferenceDesignSystemParentConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IndirectReferenceDesignSystemParentConcept");
          props_IndirectReferenceDesignSystemParentConcept = cpb.create();
        }
        return props_IndirectReferenceDesignSystemParentConcept;
      case LanguageConceptSwitch.ParametizedDesignSystemPropertyConcept:
        if (props_ParametizedDesignSystemPropertyConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ParametizedDesignSystemPropertyConcept");
          props_ParametizedDesignSystemPropertyConcept = cpb.create();
        }
        return props_ParametizedDesignSystemPropertyConcept;
      case LanguageConceptSwitch.ReferenceDesignSystemParentConcept:
        if (props_ReferenceDesignSystemParentConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ReferenceDesignSystemParentConcept = cpb.create();
        }
        return props_ReferenceDesignSystemParentConcept;
    }
    return null;
  }
}
