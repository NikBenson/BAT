package DesignSystem.System.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ColorConcept;
  private ConceptPresentation props_DesignSystemConcept;
  private ConceptPresentation props_DesignSystemPropertiesListConcept;
  private ConceptPresentation props_DesignSystemPropertyConcept;
  private ConceptPresentation props_DesignSystemPropertyParameterConcept;
  private ConceptPresentation props_DesignSystemPropertyParametersListConcept;
  private ConceptPresentation props_DesignSystemSubsystemListConcept;
  private ConceptPresentation props_IDesignSystemPropertyType;
  private ConceptPresentation props_IDesignSystemValueType;
  private ConceptPresentation props_List;
  private ConceptPresentation props_Type;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ColorConcept:
        if (props_ColorConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ColorConcept = cpb.create();
        }
        return props_ColorConcept;
      case LanguageConceptSwitch.DesignSystemConcept:
        if (props_DesignSystemConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemConcept = cpb.create();
        }
        return props_DesignSystemConcept;
      case LanguageConceptSwitch.DesignSystemPropertiesListConcept:
        if (props_DesignSystemPropertiesListConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("properties");
          props_DesignSystemPropertiesListConcept = cpb.create();
        }
        return props_DesignSystemPropertiesListConcept;
      case LanguageConceptSwitch.DesignSystemPropertyConcept:
        if (props_DesignSystemPropertyConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemPropertyConcept = cpb.create();
        }
        return props_DesignSystemPropertyConcept;
      case LanguageConceptSwitch.DesignSystemPropertyParameterConcept:
        if (props_DesignSystemPropertyParameterConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemPropertyParameterConcept = cpb.create();
        }
        return props_DesignSystemPropertyParameterConcept;
      case LanguageConceptSwitch.DesignSystemPropertyParametersListConcept:
        if (props_DesignSystemPropertyParametersListConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DesignSystemPropertyParametersListConcept");
          props_DesignSystemPropertyParametersListConcept = cpb.create();
        }
        return props_DesignSystemPropertyParametersListConcept;
      case LanguageConceptSwitch.DesignSystemSubsystemListConcept:
        if (props_DesignSystemSubsystemListConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("subsystems");
          props_DesignSystemSubsystemListConcept = cpb.create();
        }
        return props_DesignSystemSubsystemListConcept;
      case LanguageConceptSwitch.IDesignSystemPropertyType:
        if (props_IDesignSystemPropertyType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDesignSystemPropertyType = cpb.create();
        }
        return props_IDesignSystemPropertyType;
      case LanguageConceptSwitch.IDesignSystemValueType:
        if (props_IDesignSystemValueType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDesignSystemValueType = cpb.create();
        }
        return props_IDesignSystemValueType;
      case LanguageConceptSwitch.List:
        if (props_List == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_List = cpb.create();
        }
        return props_List;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Type = cpb.create();
        }
        return props_Type;
    }
    return null;
  }
}
