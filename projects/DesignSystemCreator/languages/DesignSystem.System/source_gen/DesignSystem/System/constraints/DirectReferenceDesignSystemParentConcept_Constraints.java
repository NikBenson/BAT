package DesignSystem.System.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.core.behavior.ScopeProvider__BehaviorDescriptor;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.util.HashMap;
import java.util.function.Predicate;
import DesignSystem.System.behavior.DesignSystemParentConcept__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Objects;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class DirectReferenceDesignSystemParentConcept_Constraints extends BaseConstraintsDescriptor {
  public DirectReferenceDesignSystemParentConcept_Constraints() {
    super(CONCEPTS.DirectReferenceDesignSystemParentConcept$Bq);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.designSystemConcept$PxdX, this, true, false) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return new SNodePointer("r:dc304f5b-253e-4327-b014-96295c9dad99(DesignSystem.System.constraints)", "473053312770241080");
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            for (SNode current = _context.getContextNode(); (current != null); current = SNodeOperations.getParent(current)) {
              if (SNodeOperations.isInstanceOf(current, CONCEPTS.ScopeProvider$aq)) {
                return ScopeProvider__BehaviorDescriptor.getScope_id52_Geb4QDV$.invoke(SNodeOperations.cast(current, CONCEPTS.ScopeProvider$aq), CONCEPTS.DesignSystemConcept$8a, _context.getContextNode());
              }
            }
            return ListScope.forNamedElements(Sequence.fromStream(SModelOperations.rootsIncludingImported(SNodeOperations.getModel(_context.getContextNode()), CONCEPTS.DesignSystemConcept$8a).stream().filter(DirectReferenceDesignSystemParentConcept_Constraints.this._additional_isNotParentOf(_context.getContextNode()))));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private Predicate<SNode> _additional_isNotParentOf(final SNode node) {
    return (it) -> {
      for (SNode current = SNodeOperations.cast(it, CONCEPTS.DesignSystemConcept$8a); (current != null); current = DesignSystemParentConcept__BehaviorDescriptor.resolveReference_idqgBRHbswh$.invoke(SLinkOperations.getTarget(current, LINKS.parent$cIP7))) {
        if (Objects.equals(current, node)) {
          return false;
        }
      }
      return true;
    };
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DirectReferenceDesignSystemParentConcept$Bq = MetaAdapterFactory.getConcept(0x43e160c7168c4805L, 0x904bc45c336610e7L, 0x6909f7b4b689f05L, "DesignSystem.System.structure.DirectReferenceDesignSystemParentConcept");
    /*package*/ static final SInterfaceConcept ScopeProvider$aq = MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L, "jetbrains.mps.lang.core.structure.ScopeProvider");
    /*package*/ static final SConcept DesignSystemConcept$8a = MetaAdapterFactory.getConcept(0x43e160c7168c4805L, 0x904bc45c336610e7L, 0x6909f7b4b5e14e7L, "DesignSystem.System.structure.DesignSystemConcept");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink designSystemConcept$PxdX = MetaAdapterFactory.getReferenceLink(0x43e160c7168c4805L, 0x904bc45c336610e7L, 0x6909f7b4b689f05L, 0x6909f7b4b689f06L, "designSystemConcept");
    /*package*/ static final SContainmentLink parent$cIP7 = MetaAdapterFactory.getContainmentLink(0x43e160c7168c4805L, 0x904bc45c336610e7L, 0x6909f7b4b5e14e7L, 0x6909f7b4b689f0bL, "parent");
  }
}
