package DesignSystem.System.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.style.AbstractStyleClass;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.editor.runtime.descriptor.EditorBuilderEnvironment;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;

public class DesignSystem_StyleSheet {
  public static class baseStyleClass extends AbstractStyleClass {
    public baseStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public baseStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

  }
  public static class ndkeywordStyleClass extends AbstractStyleClass {
    public ndkeywordStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public ndkeywordStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      new baseStyleClass(this).apply(style, editorCell);
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.orange));
    }

  }
  public static class keywordStyleClass extends AbstractStyleClass {
    public keywordStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public keywordStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      new baseStyleClass(this).apply(style, editorCell);
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.pink));
    }

  }
  public static class typeStyleClass extends AbstractStyleClass {
    public typeStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public typeStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      new baseStyleClass(this).apply(style, editorCell);
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.magenta));
    }

  }
  public static class constantStyleClass extends AbstractStyleClass {
    public constantStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }
    public constantStyleClass(EditorBuilderEnvironment builderEnv) {
      super(builderEnv);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      new baseStyleClass(this).apply(style, editorCell);
      style.set(StyleAttributes.TEXT_COLOR, getStyleRegistry().getSimpleColor(MPSColors.DARK_GREEN));
    }

  }
}
