package DesignSystem.System.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import java.util.List;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.editor.menus.SingleItemMenuPart;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.editor.menus.transformation.ActionItemBase;
import jetbrains.mps.nodeEditor.cellMenu.SideTransformCompletionActionItem;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.editor.menus.style.EditorMenuItemStyle;
import jetbrains.mps.editor.runtime.menus.EditorMenuItemModifyingCustomizationContext;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.editor.runtime.menus.EditorMenuItemCompositeCustomizationContext;
import jetbrains.mps.editor.runtime.completion.CompletionMenuItemCustomizationContext;
import jetbrains.mps.editor.runtime.completion.CompletionItemInformation;
import jetbrains.mps.openapi.editor.menus.style.EditorMenuItemCustomizer;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class DesignSystemPropertyConcept_TransformationMenu extends TransformationMenuBase {
  public DesignSystemPropertyConcept_TransformationMenu() {
    super(false, new EditorMenuDescriptorBase("default transformation menu for " + "DesignSystemPropertyConcept", new SNodePointer("r:1ff72d29-0f7c-4311-91e4-82b72c1e73e2(DesignSystem.System.editor)", "473053312771904521")), List.<String>of(MenuLocations.RIGHT_SIDE_TRANSFORM, MenuLocations.CONTEXT_ASSISTANT));
  }

  @Override
  @NotNull
  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {
    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.RIGHT_SIDE_TRANSFORM).contains(_context.getMenuLocation())) {
      result.add(new TMP_Action_8s0y8_a0());
    }
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.CONTEXT_ASSISTANT).contains(_context.getMenuLocation())) {
      result.add(new TMP_Action_8s0y8_a0());
    }
    return result;
  }

  private class TMP_Action_8s0y8_a0 extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
    @Nullable
    protected TransformationMenuItem createItem(TransformationMenuContext context) {
      return new Item(context).resetTraceInfo();
    }

    private class Item extends ActionItemBase implements SideTransformCompletionActionItem {
      /*package*/ Item(TransformationMenuContext context) {
        super(context);
      }
      /*package*/ Item resetTraceInfo() {
        updateTraceInfo("single item: " + getLabelText(""), new SNodePointer("r:1ff72d29-0f7c-4311-91e4-82b72c1e73e2(DesignSystem.System.editor)", "473053312771904526"));
        return this;
      }
      @Nullable
      @Override
      public String getLabelText(String pattern) {
        return "by";
      }

      @Override
      public void execute(@NotNull String pattern) {
        SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), CONCEPTS.ParametizedDesignSystemPropertyConcept$l8);
      }

      @Override
      public boolean canExecute(@NotNull String pattern) {
        return !(SNodeOperations.hasRole(_context.getNode(), LINKS.property$WA3p));
      }


      public void customize(String pattern, EditorMenuItemStyle style) {
        EditorMenuItemModifyingCustomizationContext modifyingContext = new EditorMenuItemModifyingCustomizationContext(_context.getNode(), null, null, null);
        SAbstractConcept outputConcept = null;
        EditorMenuItemCompositeCustomizationContext compositeContext = new EditorMenuItemCompositeCustomizationContext(modifyingContext, new CompletionMenuItemCustomizationContext(new CompletionItemInformation(null, outputConcept, getLabelText(pattern), getShortDescriptionText(pattern))));
        for (EditorMenuItemCustomizer customizer : CollectionSequence.fromCollection(_context.getCustomizers())) {
          customizer.customize(style, compositeContext);
        }
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ParametizedDesignSystemPropertyConcept$l8 = MetaAdapterFactory.getConcept(0x43e160c7168c4805L, 0x904bc45c336610e7L, 0x6909f7b4b95edf3L, "DesignSystem.System.structure.ParametizedDesignSystemPropertyConcept");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink property$WA3p = MetaAdapterFactory.getContainmentLink(0x43e160c7168c4805L, 0x904bc45c336610e7L, 0x6909f7b4b95edf3L, 0x6909f7b4b97586cL, "property");
  }
}
