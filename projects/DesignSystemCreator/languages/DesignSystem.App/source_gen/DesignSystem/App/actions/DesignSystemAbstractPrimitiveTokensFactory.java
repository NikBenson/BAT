package DesignSystem.App.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class DesignSystemAbstractPrimitiveTokensFactory {
  public static class NodeFactory_473053312779353484 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      {
        final SNode original = sampleNode;
        if (SNodeOperations.isInstanceOf(original, CONCEPTS.DesignSystemPrimitiveTokensConcept$P$)) {
          SPropertyOperations.assign(newNode, PROPS.name$MnvL, SPropertyOperations.getString(original, PROPS.name$MnvL));
          SLinkOperations.setTarget(newNode, LINKS.type$aWVE, SLinkOperations.getTarget(original, LINKS.type$aWVE));
          ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.tokens$Jwcn)).addSequence(ListSequence.fromList(SLinkOperations.getChildren(original, LINKS.tokens$Jwcn)));
        }
      }
      if (ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.tokens$Jwcn)).isEmpty()) {
        ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.tokens$Jwcn)).addElement(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c087386L, "DesignSystem.App.structure.AbstractDesignSystemPrimitiveTokenConcept")));
      }
    }
  }
  public static class NodeFactory_473053312779720563 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      {
        final SNode original = sampleNode;
        if (SNodeOperations.isInstanceOf(original, CONCEPTS.AbstractDesignSystemPrimitiveTokensConcept$M1)) {
          SPropertyOperations.assign(newNode, PROPS.name$MnvL, SPropertyOperations.getString(original, PROPS.name$MnvL));
          SLinkOperations.setTarget(newNode, LINKS.type$aWVE, SLinkOperations.getTarget(original, LINKS.type$aWVE));
          ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.tokens$Jwcn)).addSequence(Sequence.fromIterable(Sequence.fromStream(ListSequence.fromList(SLinkOperations.getChildren(original, LINKS.tokens$Jwcn)).toStream(false).map((it) -> SNodeFactoryOperations.replaceWithNewChild(it, CONCEPTS.DesignSystemPrimitiveTokenConcept$9B)))));
        }
      }

      if (ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.tokens$Jwcn)).isEmpty()) {
        ListSequence.fromList(SLinkOperations.getChildren(newNode, LINKS.tokens$Jwcn)).addElement(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0adb91L, "DesignSystem.App.structure.DesignSystemPrimitiveTokenConcept")));
      }
    }
  }
  public static class NodeFactory_473053312779733391 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      {
        final SNode original = sampleNode;
        if (SNodeOperations.isInstanceOf(original, CONCEPTS.AbstractDesignSystemPrimitiveTokenConcept$DX)) {
          SPropertyOperations.assign(newNode, PROPS.name$MnvL, SPropertyOperations.getString(original, PROPS.name$MnvL));

          {
            final SNode originalNotAbstract = original;
            if (SNodeOperations.isInstanceOf(originalNotAbstract, CONCEPTS.DesignSystemPrimitiveTokenConcept$9B)) {
              SLinkOperations.setTarget(newNode, LINKS.value$YBKW, SLinkOperations.getTarget(originalNotAbstract, LINKS.value$YBKW));
            }
          }
        }
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DesignSystemPrimitiveTokensConcept$P$ = MetaAdapterFactory.getConcept(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4b5e14ecL, "DesignSystem.App.structure.DesignSystemPrimitiveTokensConcept");
    /*package*/ static final SConcept AbstractDesignSystemPrimitiveTokensConcept$M1 = MetaAdapterFactory.getConcept(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c064ef7L, "DesignSystem.App.structure.AbstractDesignSystemPrimitiveTokensConcept");
    /*package*/ static final SConcept DesignSystemPrimitiveTokenConcept$9B = MetaAdapterFactory.getConcept(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0adb91L, "DesignSystem.App.structure.DesignSystemPrimitiveTokenConcept");
    /*package*/ static final SConcept AbstractDesignSystemPrimitiveTokenConcept$DX = MetaAdapterFactory.getConcept(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c087386L, "DesignSystem.App.structure.AbstractDesignSystemPrimitiveTokenConcept");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink type$aWVE = MetaAdapterFactory.getContainmentLink(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c064ef7L, 0x6909f7b4b5e150aL, "type");
    /*package*/ static final SContainmentLink tokens$Jwcn = MetaAdapterFactory.getContainmentLink(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c064ef7L, 0x6909f7b4c087389L, "tokens");
    /*package*/ static final SContainmentLink value$YBKW = MetaAdapterFactory.getContainmentLink(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0adb91L, 0x34d76d96b871bc1eL, "value");
  }
}
