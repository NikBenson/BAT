package DesignSystem.App.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractDesignSystemPrimitiveTokenConcept;
  private ConceptPresentation props_AbstractDesignSystemPrimitiveTokensConcept;
  private ConceptPresentation props_AbstractDesignSystemPrimitiveTokensConceptReference;
  private ConceptPresentation props_DesignSystemAppConcept;
  private ConceptPresentation props_DesignSystemAppFileConcept;
  private ConceptPresentation props_DesignSystemExpressionConcept;
  private ConceptPresentation props_DesignSystemPrimitiveTokenConcept;
  private ConceptPresentation props_DesignSystemPrimitiveTokensConcept;
  private ConceptPresentation props_DesignSystemPrimitiveTokensFileConcept;
  private ConceptPresentation props_DesignSystemPrimitiveTokensSetConcept;
  private ConceptPresentation props_DesignSystemPrimitiveTokensSetFileConcept;
  private ConceptPresentation props_IValueExpresssionConstraints;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractDesignSystemPrimitiveTokenConcept:
        if (props_AbstractDesignSystemPrimitiveTokenConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AbstractDesignSystemPrimitiveTokenConcept = cpb.create();
        }
        return props_AbstractDesignSystemPrimitiveTokenConcept;
      case LanguageConceptSwitch.AbstractDesignSystemPrimitiveTokensConcept:
        if (props_AbstractDesignSystemPrimitiveTokensConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AbstractDesignSystemPrimitiveTokensConcept = cpb.create();
        }
        return props_AbstractDesignSystemPrimitiveTokensConcept;
      case LanguageConceptSwitch.AbstractDesignSystemPrimitiveTokensConceptReference:
        if (props_AbstractDesignSystemPrimitiveTokensConceptReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0af97bL, 0x6909f7b4c0af97cL, "abstractDesignSystemPrimitiveTokensConcept", "", "");
          props_AbstractDesignSystemPrimitiveTokensConceptReference = cpb.create();
        }
        return props_AbstractDesignSystemPrimitiveTokensConceptReference;
      case LanguageConceptSwitch.DesignSystemAppConcept:
        if (props_DesignSystemAppConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemAppConcept = cpb.create();
        }
        return props_DesignSystemAppConcept;
      case LanguageConceptSwitch.DesignSystemAppFileConcept:
        if (props_DesignSystemAppFileConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("App");
          props_DesignSystemAppFileConcept = cpb.create();
        }
        return props_DesignSystemAppFileConcept;
      case LanguageConceptSwitch.DesignSystemExpressionConcept:
        if (props_DesignSystemExpressionConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DesignSystemExpressionConcept");
          props_DesignSystemExpressionConcept = cpb.create();
        }
        return props_DesignSystemExpressionConcept;
      case LanguageConceptSwitch.DesignSystemPrimitiveTokenConcept:
        if (props_DesignSystemPrimitiveTokenConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemPrimitiveTokenConcept = cpb.create();
        }
        return props_DesignSystemPrimitiveTokenConcept;
      case LanguageConceptSwitch.DesignSystemPrimitiveTokensConcept:
        if (props_DesignSystemPrimitiveTokensConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemPrimitiveTokensConcept = cpb.create();
        }
        return props_DesignSystemPrimitiveTokensConcept;
      case LanguageConceptSwitch.DesignSystemPrimitiveTokensFileConcept:
        if (props_DesignSystemPrimitiveTokensFileConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Primitive Tokens");
          props_DesignSystemPrimitiveTokensFileConcept = cpb.create();
        }
        return props_DesignSystemPrimitiveTokensFileConcept;
      case LanguageConceptSwitch.DesignSystemPrimitiveTokensSetConcept:
        if (props_DesignSystemPrimitiveTokensSetConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DesignSystemPrimitiveTokensSetConcept = cpb.create();
        }
        return props_DesignSystemPrimitiveTokensSetConcept;
      case LanguageConceptSwitch.DesignSystemPrimitiveTokensSetFileConcept:
        if (props_DesignSystemPrimitiveTokensSetFileConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Primitive Tokens Resolver");
          props_DesignSystemPrimitiveTokensSetFileConcept = cpb.create();
        }
        return props_DesignSystemPrimitiveTokensSetFileConcept;
      case LanguageConceptSwitch.IValueExpresssionConstraints:
        if (props_IValueExpresssionConstraints == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IValueExpresssionConstraints = cpb.create();
        }
        return props_IValueExpresssionConstraints;
    }
    return null;
  }
}
