package DesignSystem.App.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import java.util.List;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.editor.menus.SingleItemMenuPart;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.editor.menus.transformation.ActionItemBase;
import jetbrains.mps.nodeEditor.cellMenu.SideTransformCompletionActionItem;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.openapi.editor.menus.style.EditorMenuItemStyle;
import jetbrains.mps.editor.runtime.menus.EditorMenuItemModifyingCustomizationContext;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.editor.runtime.menus.EditorMenuItemCompositeCustomizationContext;
import jetbrains.mps.editor.runtime.completion.CompletionMenuItemCustomizationContext;
import jetbrains.mps.editor.runtime.completion.CompletionItemInformation;
import jetbrains.mps.openapi.editor.menus.style.EditorMenuItemCustomizer;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteCompletionActionItem;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class AbstractDesignSystemPrimitiveTokenConcept_TransformationMenu extends TransformationMenuBase {
  public AbstractDesignSystemPrimitiveTokenConcept_TransformationMenu() {
    super(false, new EditorMenuDescriptorBase("default transformation menu for " + "AbstractDesignSystemPrimitiveTokenConcept", new SNodePointer("r:e6a8cd78-a33d-415d-87ef-59be2a0e4fc6(DesignSystem.App.editor)", "473053312780534638")), List.<String>of(MenuLocations.RIGHT_SIDE_TRANSFORM, MenuLocations.SUBSTITUTE));
  }

  @Override
  @NotNull
  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {
    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.RIGHT_SIDE_TRANSFORM).contains(_context.getMenuLocation())) {
      result.add(new TMP_Action_3gtueo_a0());
    }
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.SUBSTITUTE).contains(_context.getMenuLocation())) {
      result.add(new TMP_Action_3gtueo_a1());
    }
    return result;
  }

  private class TMP_Action_3gtueo_a0 extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
    @Nullable
    protected TransformationMenuItem createItem(TransformationMenuContext context) {
      return new Item(context).resetTraceInfo();
    }

    private class Item extends ActionItemBase implements SideTransformCompletionActionItem {
      /*package*/ Item(TransformationMenuContext context) {
        super(context);
      }
      /*package*/ Item resetTraceInfo() {
        updateTraceInfo("single item: " + getLabelText(""), new SNodePointer("r:e6a8cd78-a33d-415d-87ef-59be2a0e4fc6(DesignSystem.App.editor)", "473053312780534651"));
        return this;
      }
      @Nullable
      @Override
      public String getLabelText(String pattern) {
        return ":";
      }

      @Override
      public void execute(@NotNull String pattern) {
        SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), CONCEPTS.DesignSystemPrimitiveTokenConcept$9B);
      }



      public void customize(String pattern, EditorMenuItemStyle style) {
        EditorMenuItemModifyingCustomizationContext modifyingContext = new EditorMenuItemModifyingCustomizationContext(_context.getNode(), null, null, null);
        SAbstractConcept outputConcept = null;
        EditorMenuItemCompositeCustomizationContext compositeContext = new EditorMenuItemCompositeCustomizationContext(modifyingContext, new CompletionMenuItemCustomizationContext(new CompletionItemInformation(null, outputConcept, getLabelText(pattern), getShortDescriptionText(pattern))));
        for (EditorMenuItemCustomizer customizer : CollectionSequence.fromCollection(_context.getCustomizers())) {
          customizer.customize(style, compositeContext);
        }
      }
    }
  }
  private class TMP_Action_3gtueo_a1 extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
    @Nullable
    protected TransformationMenuItem createItem(TransformationMenuContext context) {
      return new Item(context).resetTraceInfo();
    }

    private class Item extends ActionItemBase implements SubstituteCompletionActionItem {
      /*package*/ Item(TransformationMenuContext context) {
        super(context);
      }
      /*package*/ Item resetTraceInfo() {
        updateTraceInfo("single item: " + getLabelText(""), new SNodePointer("r:e6a8cd78-a33d-415d-87ef-59be2a0e4fc6(DesignSystem.App.editor)", "473053312780586962"));
        return this;
      }
      @Nullable
      @Override
      public String getLabelText(String pattern) {
        if (pattern.isBlank()) {
          return "token";
        }
        return pattern;
      }

      @Override
      public void execute(@NotNull String pattern) {
        if (pattern.endsWith(":")) {
          SPropertyOperations.assign(SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), CONCEPTS.DesignSystemPrimitiveTokenConcept$9B), PROPS.name$MnvL, pattern.substring(0, pattern.length() - 1));
        } else {
          SPropertyOperations.assign(SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), CONCEPTS.AbstractDesignSystemPrimitiveTokenConcept$DX), PROPS.name$MnvL, pattern);
        }
      }



      public void customize(String pattern, EditorMenuItemStyle style) {
        EditorMenuItemModifyingCustomizationContext modifyingContext = new EditorMenuItemModifyingCustomizationContext(_context.getNode(), null, null, null);
        SAbstractConcept outputConcept = null;
        EditorMenuItemCompositeCustomizationContext compositeContext = new EditorMenuItemCompositeCustomizationContext(modifyingContext, new CompletionMenuItemCustomizationContext(new CompletionItemInformation(null, outputConcept, getLabelText(pattern), getShortDescriptionText(pattern))));
        for (EditorMenuItemCustomizer customizer : CollectionSequence.fromCollection(_context.getCustomizers())) {
          customizer.customize(style, compositeContext);
        }
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DesignSystemPrimitiveTokenConcept$9B = MetaAdapterFactory.getConcept(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0adb91L, "DesignSystem.App.structure.DesignSystemPrimitiveTokenConcept");
    /*package*/ static final SConcept AbstractDesignSystemPrimitiveTokenConcept$DX = MetaAdapterFactory.getConcept(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c087386L, "DesignSystem.App.structure.AbstractDesignSystemPrimitiveTokenConcept");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
