package DesignSystem.App.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AbstractDesignSystemPrimitiveTokenConcept_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AbstractDesignSystemPrimitiveTokensConcept_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AbstractDesignSystemPrimitiveTokensConceptReference_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DesignSystemAppFileConcept_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new DesignSystemPrimitiveTokenConcept_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new DesignSystemPrimitiveTokensConcept_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new DesignSystemPrimitiveTokensFileConcept_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new DesignSystemPrimitiveTokensSetConcept_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new DesignSystemPrimitiveTokensSetFileConcept_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }
  private Collection<ConceptEditorComponent> getDeclaredEC_0(String editorComponentId) {
    switch (editorComponentId) {
      case "DesignSystem.App.editor.DesignSystemPrimitiveTokensConcept_body":
        return Collections.singletonList(new DesignSystemPrimitiveTokensConcept_body());
      case "DesignSystem.App.editor.DesignSystemPrimitiveTokensConcept_head":
        return Collections.singletonList(new DesignSystemPrimitiveTokensConcept_head());
    }
    return Collections.emptyList();
  }
  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return getDeclaredEC_0(editorComponentId);
      default:
    }
    return Collections.emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new AbstractDesignSystemPrimitiveTokenConcept_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new DesignSystemPrimitiveTokensConcept_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new AbstractDesignSystemPrimitiveTokensConceptReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c087386L), MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c064ef7L), MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0af97bL), MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c064effL), MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0adb91L), MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4b5e14ecL), MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0627b3L), MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0665eeL), MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0665efL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c064ef7L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c087386L), MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4b5e14ecL)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x9b844d5fd3bc48e3L, 0x8d2ed303cf551efeL, 0x6909f7b4c0af97bL)).seal();
}
